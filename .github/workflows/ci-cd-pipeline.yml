name: "CI/CD Pipeline"

on:
  pull_request:
    branches:
      - "main"
      - "dev"
  push:
    branches:
      - "main"
      - "dev"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get Short SHA
        id: vars
        run: echo "GITHUB_SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build and tag Docker image
        id: docker_build  # ID is required for outputs to work
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/poseidon-api:${{ env.GITHUB_SHORT_SHA }} -t ${{ secrets.DOCKER_HUB_USERNAME }}/poseidon-api:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/poseidon-api:${{ env.GITHUB_SHORT_SHA }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/poseidon-api:latest

      - name: Save Docker Image Tag
        id: docker_tag
        run: echo "DOCKER_IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/poseidon-api:${{ env.GITHUB_SHORT_SHA }}" >> $GITHUB_ENV
    outputs:
      DOCKER_IMAGE_TAG: ${{ secrets.DOCKER_HUB_USERNAME }}/poseidon-api:${{ env.GITHUB_SHORT_SHA }}

  test:
    runs-on: ubuntu-latest
    needs: build  # This ensures the test job waits for the build job to complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Pull latest Docker image and run tests
        run: |
          docker pull ${{ needs.build.outputs.DOCKER_IMAGE_TAG }}  # Referencing the output from the build job
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/test-results \
            ${{ needs.build.outputs.DOCKER_IMAGE_TAG }} \
            dotnet test /src/Poseidon.Tests/Poseidon.Tests.csproj --no-build --results-directory /test-results --logger trx

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: Test Results
          path: test-results

  lint:
    name: Lint and Code Quality Check
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Linter
        run: sudo apt-get install -y dotnet-format

      - name: Run Lint Check
        run: dotnet format --check

  security_scan:
    name: Run Security Scan
    runs-on: ubuntu-latest
    needs: test
    container:
      image: aquasec/trivy:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run vulnerability scan
        run: trivy image --severity CRITICAL --exit-code 1 ${{ env.DOCKER_IMAGE_TAG }}

  deploy_dev:
    name: Deploy to Dev Environment
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1

      - name: Deploy to Kubernetes (Dev)
        run: |
          kubectl apply -f k8s/Deployment.yml
          kubectl apply -f k8s/Service.yml

  manual_approval:
    name: Manual Approval for Production
    runs-on: ubuntu-latest
    needs: deploy_dev
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Await Approval
        run: echo "Approve this deployment to Prod?"

  deploy_prod:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: manual_approval
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1

      - name: Deploy to Kubernetes (Prod)
        run: |
          kubectl apply -f k8s/Deployment.yml
          kubectl apply -f k8s/Service.yml
